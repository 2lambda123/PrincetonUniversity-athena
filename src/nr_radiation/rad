angulargrid.cpp:  int n1z = pmb->ncells1, n2z = pmb->ncells2, n3z = pmb->ncells3;  
angulargrid.cpp:    int n1z = pmb->ncells1, n2z = pmb->ncells2, n3z = pmb->ncells3;  
radiation.cpp:    pmy_block(pmb), ir(pmb->ncells3,pmb->ncells2,pmb->ncells1,pmb->nfre_ang),
radiation.cpp:    ir1(pmb->ncells3,pmb->ncells2,pmb->ncells1,pmb->nfre_ang),
radiation.cpp:    flux{ {pmb->ncells3, pmb->ncells2, pmb->ncells1+1, pmb->nfre_ang},
radiation.cpp:      {pmb->ncells3, pmb->ncells2+1, pmb->ncells1, pmb->nfre_ang,
radiation.cpp:       (pmb->pmy_mesh->f2 ? AthenaArray<Real>::DataStatus::allocated :
radiation.cpp:      {pmb->ncells3+1, pmb->ncells2, pmb->ncells1, pmb->nfre_ang,
radiation.cpp:       (pmb->pmy_mesh->f3 ? AthenaArray<Real>::DataStatus::allocated :
radiation.cpp:    coarse_ir_(pmb->ncc3, pmb->ncc2, pmb->ncc1,pmb->nfre_ang,
radiation.cpp:             (pmb->pmy_mesh->multilevel ? AthenaArray<Real>::DataStatus::allocated :
radiation.cpp:  Mesh *pm = pmb->pmy_mesh;
radiation.cpp:  int nc1 = pmb->ncells1, nc2 = pmb->ncells2, nc3 = pmb->ncells3;  
radiation.cpp://  pmb->RegisterMeshBlockData(ir);
radiation.cpp:        cot_theta(i) = cos(pmb->pcoord->x2v(i))/sin(pmb->pcoord->x2v(i));
radiation.cpp:  rad_bvar.bvar_index = pmb->pbval->bvars.size();
radiation.cpp:  pmb->pbval->bvars.push_back(&rad_bvar);
radiation.cpp:    pmb->pbval->bvars_main_int.push_back(&rad_bvar);
radiation.cpp:    fprintf(pfile,"iteration:    %d  \n",pmb->pmy_mesh->pimrad->ite_scheme);
radiation.cpp:    fprintf(pfile,"red_or_black: %d  \n",pmb->pmy_mesh->pimrad->rb_or_not);
radiation.cpp:    fprintf(pfile,"err_limit:    %e  \n",pmb->pmy_mesh->pimrad->error_limit_);
radiation.cpp:    fprintf(pfile,"n_limit:      %d  \n",pmb->pmy_mesh->pimrad->nlimit_);
