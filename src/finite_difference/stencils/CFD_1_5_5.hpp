#ifndef CFD_1_5_5_HPP_
#define CFD_1_5_5_HPP_

#include "../compact_finite_differencing.hpp"

// ============================================================================
// Unfiltered: gamma[eta] = 1 (eta<=pi)
// Parameters A: M_L, M_R; B: M_L, M_R; p
// C: 2, 2; 2, 2; 7
// L:
//    1, 4; 1, 2; 7
//    0, 6; 0, 2; 7
// R:
//    4, 1; 4, 2; 7
//    6, 0; 2, 0; 7

// LHS:
// center -------------------------------------------------
template<>
const std::vector<Real> FDCompactStencil<
  1, 5, 5, 0, 0
>::LcoeffC = {
  0.027777777777777777777777777777777777777777777778,
  0.44444444444444444444444444444444444444444444444,
  1.0000000000000000000000000000000000000000000000,
  0.44444444444444444444444444444444444444444444444,
  0.027777777777777777777777777777777777777777777778
};

// left ---------------------------------------------------
template<>
const std::vector<std::vector<Real>> FDCompactStencil<
  1, 5, 5, 0, 0
>::LcoeffL = {
  {
    1.000000000000000000000000000000000000000000000,
    12.00000000000000000000000000000000000000000000,
    15.00000000000000000000000000000000000000000000
  },
  {
    0.06666666666666666666666666666666666666666666667,
    1.0000000000000000000000000000000000000000000000,
    2.0000000000000000000000000000000000000000000000,
    0.6666666666666666666666666666666666666666666667
  }
};

// right --------------------------------------------------
template<>
const std::vector<std::vector<Real>> FDCompactStencil<
  1, 5, 5, 0, 0
>::LcoeffR = {
  {
    0.6666666666666666666666666666666666666666666667,
    2.0000000000000000000000000000000000000000000000,
    1.0000000000000000000000000000000000000000000000,
    0.06666666666666666666666666666666666666666666667
  },
  {
    15.00000000000000000000000000000000000000000000,
    12.00000000000000000000000000000000000000000000,
    1.000000000000000000000000000000000000000000000
  }
};

// collected ----------------------------------------------
template<>
const std::vector<std::vector<unsigned int>> FDCompactStencil<
  1, 5, 5, 0, 0
>::Loffset = {
  {0, 1},
  {2},
  {2, 2}
};

template<>
const std::vector<std::vector<unsigned int>> FDCompactStencil<
  1, 5, 5, 0, 0
>::Lwidth = {
  {3, 4},
  {5},
  {4, 3}
};

template<>
const std::vector<std::vector<int>> FDCompactStencil<
  1, 5, 5, 0, 0
>::Lrix = {
  {0, 2}, {2, -2}, {-2, 0}
};
// --------------------------------------------------------

// RHS:
// center -------------------------------------------------
template<>
const std::vector<Real> FDCompactStencil<
  1, 5, 5, 0, 0
>::RcoeffC = {
  -0.11574074074074074074074074074074074074074074074,
  -0.7407407407407407407407407407407407407407407407,
  0.,
  0.7407407407407407407407407407407407407407407407,
  0.11574074074074074074074074074074074074074074074
};

// left ---------------------------------------------------
template<>
const std::vector<std::vector<Real>> FDCompactStencil<
  1, 5, 5, 0, 0
>::RcoeffL = {
  {
    -3.95000000000000000000000000000000000000000000,
    -15.40000000000000000000000000000000000000000000,
    13.75000000000000000000000000000000000000000000,
    6.66666666666666666666666666666666666666666667,
    -1.250000000000000000000000000000000000000000000,
    0.200000000000000000000000000000000000000000000,
    -0.01666666666666666666666666666666666666666666667
  },
  {
    -0.27444444444444444444444444444444444444444444444,
    -1.5833333333333333333333333333333333333333333333,
    0.33333333333333333333333333333333333333333333333,
    1.4444444444444444444444444444444444444444444444,
    0.08333333333333333333333333333333333333333333333,
    -0.0033333333333333333333333333333333333333333333333
  }
};

// right --------------------------------------------------
template<>
const std::vector<std::vector<Real>> FDCompactStencil<
  1, 5, 5, 0, 0
>::RcoeffR = {
  {
    0.0033333333333333333333333333333333333333333333333,
    -0.08333333333333333333333333333333333333333333333,
    -1.4444444444444444444444444444444444444444444444,
    -0.33333333333333333333333333333333333333333333333,
    1.5833333333333333333333333333333333333333333333,
    0.27444444444444444444444444444444444444444444444
  },
  {
    0.01666666666666666666666666666666666666666666667,
    -0.200000000000000000000000000000000000000000000,
    1.250000000000000000000000000000000000000000000,
    -6.66666666666666666666666666666666666666666667,
    -13.75000000000000000000000000000000000000000000,
    15.40000000000000000000000000000000000000000000,
    3.95000000000000000000000000000000000000000000
  }
};

// collected ----------------------------------------------
template<>
const std::vector<std::vector<unsigned int>> FDCompactStencil<
  1, 5, 5, 0, 0
>::Roffset = {
  {0, 1}, // left
  {2},    // center
  {4, 6}  // right
};

template<>
const std::vector<std::vector<unsigned int>> FDCompactStencil<
  1, 5, 5, 0, 0
>::Rwidth = {
  {7, 6}, // left
  {5},    // center
  {6, 7}  // right
};

template<>
const std::vector<std::vector<int>> FDCompactStencil<
  1, 5, 5, 0, 0
>::Rrix = {
  {0, 2}, {2, -2}, {-2, 0}  // left, center, right
};
// --------------------------------------------------------

// ============================================================================
// Unfiltered: gamma[eta] = 1 (eta<=pi)
// Parameters A: M_L, M_R; B: M_L, M_R; p
// C: 2, 2; 2, 2; 7
// L:
//    0, 2; 0, 2; 3
//    1, 2; 1, 2; 5
// R:
//    2, 1; 2, 1; 5
//    2, 0; 2, 0; 3

// LHS:
// center -------------------------------------------------
template<>
const std::vector<Real> FDCompactStencil<
  1, 5, 5, 0, -1
>::LcoeffC = {
  0.027777777777777777777777777777777777777777777778,
  0.44444444444444444444444444444444444444444444444,
  1.0000000000000000000000000000000000000000000000,
  0.44444444444444444444444444444444444444444444444,
  0.027777777777777777777777777777777777777777777778
};

// left ---------------------------------------------------
template<>
const std::vector<std::vector<Real>> FDCompactStencil<
  1, 5, 5, 0, -1
>::LcoeffL = {
  {
    1.000000000000000000000000000000000000000000000000,
    4.00000000000000000000000000000000000000000000000,
    1.000000000000000000000000000000000000000000000000
  },
  {
    0.111111111111111111111111111111111111111111111111,
    1.00000000000000000000000000000000000000000000000,
    1.00000000000000000000000000000000000000000000000,
    0.111111111111111111111111111111111111111111111111
  }
};

// right --------------------------------------------------
template<>
const std::vector<std::vector<Real>> FDCompactStencil<
  1, 5, 5, 0, -1
>::LcoeffR = {
  {
    0.111111111111111111111111111111111111111111111111,
    1.00000000000000000000000000000000000000000000000,
    1.00000000000000000000000000000000000000000000000,
    0.111111111111111111111111111111111111111111111111
  },
  {
    1.000000000000000000000000000000000000000000000000,
    4.00000000000000000000000000000000000000000000000,
    1.000000000000000000000000000000000000000000000000
  }
};

// collected ----------------------------------------------
template<>
const std::vector<std::vector<unsigned int>> FDCompactStencil<
  1, 5, 5, 0, -1
>::Loffset = {
  {0, 1},
  {2},
  {2, 2}
};

template<>
const std::vector<std::vector<unsigned int>> FDCompactStencil<
  1, 5, 5, 0, -1
>::Lwidth = {
  {3, 4},
  {5},
  {4, 3}
};

template<>
const std::vector<std::vector<int>> FDCompactStencil<
  1, 5, 5, 0, -1
>::Lrix = {
  {0, 2}, {2, -2}, {-2, 0}
};
// --------------------------------------------------------

// RHS:
// center -------------------------------------------------
template<>
const std::vector<Real> FDCompactStencil<
  1, 5, 5, 0, -1
>::RcoeffC = {
  -0.11574074074074074074074074074074074074074074074,
  -0.7407407407407407407407407407407407407407407407,
  0.,
  0.7407407407407407407407407407407407407407407407,
  0.11574074074074074074074074074074074074074074074
};

// left ---------------------------------------------------
template<>
const std::vector<std::vector<Real>> FDCompactStencil<
  1, 5, 5, 0, -1
>::RcoeffL = {
  {
    -3.00000000000000000000000000000000000000000000000,
    0.,
    3.00000000000000000000000000000000000000000000000
  },
  {
    -0.40740740740740740740740740740740740740740740741,
    -1.00000000000000000000000000000000000000000000000,
    1.00000000000000000000000000000000000000000000000,
    0.40740740740740740740740740740740740740740740741
  }
};

// right --------------------------------------------------
template<>
const std::vector<std::vector<Real>> FDCompactStencil<
  1, 5, 5, 0, -1
>::RcoeffR = {
  {
    -0.40740740740740740740740740740740740740740740741,
    -1.00000000000000000000000000000000000000000000000,
    1.00000000000000000000000000000000000000000000000,
    0.40740740740740740740740740740740740740740740741
  },
  {
    -3.00000000000000000000000000000000000000000000000,
    0.,
    3.00000000000000000000000000000000000000000000000
  }
};

// collected ----------------------------------------------
template<>
const std::vector<std::vector<unsigned int>> FDCompactStencil<
  1, 5, 5, 0, -1
>::Roffset = {
  {0, 1}, // left
  {2},    // center
  {3, 2}  // right
};

template<>
const std::vector<std::vector<unsigned int>> FDCompactStencil<
  1, 5, 5, 0, -1
>::Rwidth = {
  {3, 4}, // left
  {5},    // center
  {4, 3}  // right
};

template<>
const std::vector<std::vector<int>> FDCompactStencil<
  1, 5, 5, 0, -1
>::Rrix = {
  {0, 2}, {2, -2}, {-2, 0}  // left, center, right
};
// --------------------------------------------------------

// ============================================================================
// Filtered
// LHS:

#endif