Fluid:
 - timestep calculation only works for Newtonian hydro
 - design decision: metric arrays
   - currently have g, g_inv as 1D arrays (x 10 for size of metric) in Fluid
   - no longer used in Fluid; currently only used in FluidEqnOfState (cons -> prim)
   - FluidEqnOfState could calculate needed size (ncells1) and allocate g,g_inv
     - Fluid would no longer need g,g_inv
     - Would avoid awkward deep copy of arrays just to get size
       - Even a shallow *copy* would be awkward
   - Cons:
     - maybe something else under Fluid will want metric; don't want to duplicate
       ncells1 calculation
     - Fluid is already calculating ncells1 anyway

Integrators:
 - do we really need all of ivx, ivy, and ivz?
   - either ivx==IVX (and so ivy==IVY and ivz==IVZ)
     or ivx==IVY, ivy==IVZ, ivz==IVX
     or ivx==IVZ, ivy==IVX, ivz==IVY

Outputs:
 - add output of ghost zones 
 - add double precision option for vtk/hdf5 outputs
 - add proper line integrals in Sum transform
 - allow 5 digits in filename numbers??
 - add plast and plast_out ptrs to all linked lists so they are back-searchable
 - disable slicing and sums for 1D data

Inputs:
 - how do we specify metric parameters (e.g. M and a=J/M)?
   - answer: add <problem> fields in input file
 - implement -d <directory> option?

Coordinates:
 - are arrays like face1_area_i_ big enough? seems like they should be nx1+2*NGHOST +1
   - answer: only using areas that border non-ghost cells, so this works as long as
     NGHOST >= 1
 - CellVolume(), Area1Face(), Area2Face(), Area3Face(): input il and iu should be
   calculable from which function is called:
   - CellVolume(): is -> ie
   - Area1Face(): is -> ie+1
   - Area2Face(): is -> ie
   - Area3Face(): is -> ie
   - Even future additions to code shouldn't care about areas and volumes in outer
     regions of ghost zones?

Problem Generators:
 - shock_tube_gr: currently assumes Minkowski
 - *if* they are required to set primitives (and half-step primitives) everywhere
   (including BCs), then does mesh step 5 need UpdateAcrossDomains(convert_vars_n)?

Mesh:
 - do we need to print is, ie, js, etc. at runtime?

Optimization:
 - check formulas in GR coordinates for simplifications
   - example: T^2_2 = M^2_y g_{22} M^2_y T^{yy} = T^{yy} in Schwarzschild
     - perhaps we should be storing combinations like M^2_y g_{22} M^2_y above rather
       than M^\mu_\hat{\nu} (but we still need M^\hat{\mu}_\nu) for transformation of
       primitives
 - const-ness of input int's can't be influencing code, can it?

AthenaArray:
 - check bug fix in move operator
   - athena_arrays.hpp, line 115
   - template<typename T> AthenaArray<T> &AthenaArray<T>::operator= (const AthenaArray<T> &src)
   - "this." -> "this->"?
   - compiler never complained before -> not instantiatated anywhere (and therefore
     never compiled)?

Documentation (wiki pages):
 - tutorial
 - outputs
 - setting physics options
 - writing problem generators
 - adding source terms
 - design and classes
 - running unit tests?
 - recursion tests?

Other:
 - define constructor/destructor for all classes
 - disable copy and assignment operators for all classes
 - consistent order/commenting of headers following main.cpp or wrapper.cpp
 - Any "TODO" in source code
 - fix memory leaks
 - use memcopy() in athena array assignment operators?
 - Use cbrt()?
   - so far always available in <cmath>
   - but only guaranteed for C++11
   - pre-C++11 if included it is in global namespace, not std::
   - cbrt(<>) treats negative inputs correctly; pow(<>,1./3.) does not
 - Check for local declarations at the beginnings of files
   - Often have "// Declarations" line above them
   - Consist of helper functions only used by that file
   - Is there a way ensure these don't have namespace collisions with other files?
     - Namespaces?
     - Static or inline linkage? (What do these *really* do in C++ anyway?)
   - Manually inline for performance anyway?
