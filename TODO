Fluid:
 - timestep calculation only works for Newtonian hydro

Integrators:
 - do we really need all of ivx, ivy, and ivz?
   - either ivx==IVX (and so ivy==IVY and ivz==IVZ)
     or ivx==IVY, ivy==IVZ, ivz==IVX
     or ivx==IVZ, ivy==IVX, ivz==IVY

Outputs:
 - add output of ghost zones 
 - add double precision option for vtk outputs
 - add proper line integrals in Sum transform
 - allow 5 digits in filename numbers??
 - clean-up/comment

Inputs:
 - how do we specify metric parameters (e.g. M and a=J/M)?
   - answer: add <problem> fields in input file
 - implement -d <directory> option?

Coordinates:
 - are arrays like face1_area_i_ big enough? seems like they should be nx1+2*NGHOST +1
   - answer: only using areas that border non-ghost cells, so this works as long as
     NGHOST >= 1
 - CellVolume(), Area1Face(), Area2Face(), Area3Face(): input il and iu should be
   calculable from which function is called:
   - CellVolume(): is -> ie
   - Area1Face(): is -> ie+1
   - Area2Face(): is -> ie
   - Area3Face(): is -> ie
   - Even future additions to code shouldn't care about areas and volumes in outer
     regions of ghost zones?

Problem Generators:
 - shock_tube_gr: currently assumes Minkowski
 - *if* they are required to set primitives (and half-step primitives) everywhere
   (including BCs), then does mesh step 5 need UpdateAcrossDomains(convert_vars_n)?

Mesh:
 - do we need to print is, ie, js, etc. at runtime?

Optimization:
 - const-ness of input int's can't be influencing code, can it?

Documentation (wiki pages):
 - tutorial
 - outputs
 - setting physics options
 - writing problem generators
 - adding source terms
 - design and classes
 - running unit tests?

Other:
 - RESTARTS!!
 - Any "TODO" in source code
 - fix memory leaks
 - Use cbrt()?
   - so far always available in <cmath>
   - but only guaranteed for C++11
   - pre-C++11 if included it is in global namespace, not std::
   - cbrt(<>) treats negative inputs correctly; pow(<>,1./3.) does not
 - Check for local declarations at the beginnings of files
   - Often have "// Declarations" line above them
   - Consist of helper functions only used by that file
   - Is there a way ensure these don't have namespace collisions with other files?
     - Namespaces?
     - Static or inline linkage? (What do these *really* do in C++ anyway?)
   - Manually inline for performance anyway?
